{"version":3,"sources":["Constants/constants.js","Util/web.js","Components/AppBar.js","Components/GridContainer.js","Components/Map.js","Components/MapFactory.js","App.js","serviceWorker.js","index.js"],"names":["apiBaseUrl","hubPath","states","className","get","route","callback","a","http","XMLHttpRequest","url","open","send","onreadystatechange","_","readyState","JSON","parse","responseText","Appbar","props","Fragment","AppBar","color","position","Toolbar","variant","Box","mx","Button","onClick","startGame","disabled","gameIsOn","Typography","score","GridContiner","width","display","justifyContent","alignContent","overflow","top","left","marginTop","children","Map","updateScore","obj","setState","parseInt","setBoard","rows","columns","mapDidInit","initBoard","changeDirection","e","stopPropagation","validKeyCode","keyCode","state","connection","invoke","key","code","map","bindMethods","this","beginCountdown","bind","onGameOver","initNegotiation","document","addEventListener","row","column","createArea","clearBoard","forEach","square","push","grid","i","renderColumn","on","countDown","updateSnakePosition","gameWon","start","catch","err","console","log","signalR","withUrl","build","setConnectionListeners","connectionDidInit","milliseconds","Promise","resolve","countdownIsOn","currentCountDown","setTimeout","lastSquare","body","snake","food","head","splice","length","alert","style","boxSizing","zIndex","alignItems","right","minHeight","green","receivedHandshakeResponse","warn","renderCountdown","id","height","margin","renderRows","Component","MapFactory","rowsPath","columnsPath","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c2263cb.chunk.js","sourcesContent":["\r\nexport const apiBaseUrl = \"https://snakegameapi.azurewebsites.net/\"; \r\nexport const hubPath = `${apiBaseUrl}game`;\r\n\r\nexport const states = {\r\n    UNVISITED: 1,\r\n    FOOD: 2,\r\n    PATH: 3,\r\n    HEAD: 4\r\n}\r\n\r\nexport const className = {\r\n    [states.UNVISITED]: \"square_unvisited\",\r\n    [states.FOOD] : \"square_food\",\r\n    [states.PATH] : \"square_path\",\r\n    [states.HEAD] : \"square_head\"\r\n}\r\n\r\n\r\n","\r\nimport { apiBaseUrl } from \"../Constants/constants\";\r\n\r\nexport async function get(route, callback) {\r\n    const http = new XMLHttpRequest();\r\n    const url = apiBaseUrl + route;\r\n    http.open(\"GET\", url)\r\n    await http.send();\r\n    http.onreadystatechange = _ => {\r\n        if (http.readyState === 4)\r\n            callback(JSON.parse(http.responseText));  \r\n        \r\n    }  \r\n}\r\n\r\n","import React from 'react';\r\nimport { AppBar, Button, Toolbar, Typography, Box } from '@material-ui/core';\r\n\r\nexport default function Appbar(props) {\r\n\r\n        \r\n        return <React.Fragment>\r\n            <AppBar color=\"inherit\" position=\"static\">\r\n            <Toolbar variant=\"dense\">\r\n                <Box mx={2}>\r\n                    <Button \r\n                        onClick={props.startGame}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={props.gameIsOn}\r\n                        >\r\n                                Start\r\n                        </Button>\r\n                </Box>\r\n                <Typography variant=\"h6\">Score: {props.score}</Typography>\r\n                    \r\n            </Toolbar>\r\n            </AppBar>\r\n        </React.Fragment>\r\n}\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core'\r\n\r\nexport default function GridContiner(props) {\r\n\r\n\r\n\r\n    return <React.Fragment>\r\n        <Box \r\n            width=\"100%\" \r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignContent=\"center\"\r\n            position=\"absolute\"\r\n            overflow=\"hidden\"\r\n            top=\"0\"\r\n            left=\"0\"\r\n            marginTop=\"60px\"\r\n        >\r\n            {props.children}\r\n        </Box>\r\n        </React.Fragment>\r\n}\r\n","import React, { Component } from 'react';\r\nimport { get } from \"../Util/web\";\r\nimport { states, hubPath, className } from \"../Constants/constants\";\r\nimport * as signalR from '@microsoft/signalr';\r\nimport \"./squareStyles.css\";\r\nimport Appbar from './AppBar';\r\nimport GridContiner from './GridContainer';\r\nimport { Typography, Box } from '@material-ui/core';\r\nimport green from '@material-ui/core/colors/green';\r\nexport default class Map extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            map: [],\r\n            rows: 0,\r\n            columns: 0,\r\n            score: 0\r\n        }\r\n        this.bindMethods();\r\n    }\r\n\r\n    bindMethods() {\r\n        this.beginCountdown = this.beginCountdown.bind(this);\r\n        this.startGame = this.startGame.bind(this);\r\n        this.onGameOver = this.onGameOver.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setBoard();\r\n        this.initNegotiation();\r\n        document.addEventListener(\"keypress\", this.changeDirection);\r\n        document.addEventListener(\"keydown\", this.changeDirection);\r\n    }\r\n\r\n    createArea(row, column) {\r\n        return {\r\n            row,\r\n            column,\r\n            state: states.UNVISITED\r\n        }\r\n    }\r\n\r\n    updateScore = obj => this.setState({ score: parseInt(obj.score) });\r\n    \r\n\r\n    clearBoard() {\r\n        const { rows, columns } = this.state;\r\n        const map = [];\r\n        for (let row = 0; row < rows; row++) {\r\n            map[row] = [];\r\n            for (let column = 0; column < columns; column++)\r\n                map[row][column] = this.createArea(row, column);\r\n        }\r\n        this.setState({ map });\r\n    }\r\n\r\n    initBoard() {\r\n        this.clearBoard()\r\n        this.setState({ mapDidInit: true });\r\n    }\r\n\r\n    renderColumn(row) {\r\n        const { map } = this.state;\r\n        const columns = [];\r\n\r\n        map[row].forEach(square => {\r\n            columns.push(\r\n                <td\r\n                    className={\"square \" + className[square.state]}\r\n                    key={`${row}_${square.column}`}\r\n                ></td>\r\n            )\r\n        });\r\n\r\n        return columns;\r\n    }\r\n\r\n    renderRows() {\r\n        const { map } = this.state;\r\n        const grid = [];\r\n        map.forEach((row, i) => {\r\n            grid[i] = \r\n            <tr key={i}>\r\n                {this.renderColumn(i)}\r\n            </tr>\r\n        })\r\n        return grid;\r\n    }\r\n\r\n    setConnectionListeners(connection) {\r\n        connection.on('beginCountDown', countDown => this.beginCountdown(countDown));\r\n        connection.on('updateSnake', e => this.updateSnakePosition(e));\r\n        connection.on('updateScore', obj => this.updateScore(obj));\r\n        connection.on('gameOver', () => this.onGameOver());\r\n        connection.on('gameWon', () => this.gameWon());\r\n        connection.start()\r\n            .catch(err => console.log(\"Establishing connection to server failed.\"));\r\n    }\r\n\r\n    async initNegotiation() {\r\n        const connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(hubPath)\r\n            .build();\r\n\r\n        this.setConnectionListeners(connection);\r\n        this.setState({ connection, connectionDidInit: true });\r\n    }\r\n\r\n    beginCountdown(milliseconds) {\r\n        return new Promise(resolve => {\r\n            this.setState({ countdownIsOn: true, currentCountDown: milliseconds / 1000 }, async () => {\r\n                for (let i = milliseconds / 1000; i > 0; i--) {\r\n                    this.setState({ currentCountDown:  i});\r\n                    await new Promise(resolve => setTimeout(resolve, 1000));\r\n                }\r\n                this.setState({ countdownIsOn: false });\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    setBoard = async _ => await get(\"init\", obj => \r\n        this.setState({ rows: obj.rows, columns: obj.columns, mapDidInit: true }, () => this.initBoard()));\r\n\r\n    changeDirection = e => {\r\n        e.stopPropagation();\r\n        if (!this.validKeyCode(e.keyCode)) return;\r\n         this.state.connection.invoke('ChangeDirection', e.key);\r\n    }\r\n\r\n    validKeyCode = code => code === 37 || code === 38 || code === 39 || code === 40\r\n\r\n    updateSnakePosition(obj) {\r\n        const { map, lastSquare } = this.state;\r\n        const body = obj.snake;\r\n        const food = obj.food;\r\n        food.forEach(food => {\r\n            map[food.row][food.column].state = states.FOOD;\r\n        });\r\n\r\n        if (lastSquare)\r\n            map[lastSquare.row][lastSquare.column].state = states.UNVISITED;\r\n\r\n        \r\n        const head = body.splice(0, 1)[0];\r\n        map[head.row][head.column].state = states.HEAD;\r\n        body.forEach(body => {\r\n            map[body.row][body.column].state = states.PATH;\r\n        });\r\n        this.setState({ map, lastSquare: body[body.length - 1] });\r\n        \r\n    }\r\n\r\n    gameWon() {\r\n        const { score } = this.state;\r\n        alert(\"Congrats you won the snake with a score of \" + score + \" points.\");\r\n        this.setState({ gameIsOn: false });\r\n    }\r\n\r\n    onGameOver() {\r\n        this.setState({ gameIsOn: false });\r\n    }\r\n\r\n    renderCountdown() {\r\n        const { countdownIsOn, currentCountDown } = this.state;\r\n        if (countdownIsOn) {\r\n            return <Box \r\n            style={{ boxSizing: \"border-box\" }}\r\n                        zIndex=\"10\"\r\n                        position=\"absolute\"\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        right=\"0\"\r\n                        left=\"0\"\r\n                        minHeight=\"98%\"\r\n                        color={green[600]}\r\n                    >\r\n                    <Typography variant=\"h1\">{currentCountDown}</Typography>\r\n                 </Box>\r\n        } \r\n    }\r\n\r\n    async startGame() {\r\n        const { connection } = this.state;\r\n        if (connection && connection.receivedHandshakeResponse) {\r\n            this.setState({ gameIsOn: true, score: 0 });\r\n            this.clearBoard();\r\n            await this.beginCountdown(3000);\r\n            connection.invoke('StartGame')\r\n                .catch(err => {\r\n                    this.setState({ gameIsOn: false });\r\n                    console.warn(\"Couldnt start the game. Try to refresh your browser.\");\r\n                });\r\n        } else {\r\n            console.warn(\"Cannot connect to the server. The server might be down.\");\r\n            this.setBoard();\r\n            await this.initNegotiation();\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { score, gameIsOn } = this.state;\r\n\r\n        \r\n        return <React.Fragment>\r\n            {this.renderCountdown()}\r\n            \r\n        <Appbar \r\n            startGame={this.startGame}\r\n            score={score}\r\n            gameIsOn={gameIsOn}\r\n        />\r\n\r\n        <GridContiner>  \r\n            <table\r\n                id=\"bob\"\r\n                style={{\r\n                    width: '86vh',\r\n                    height: '86vh',\r\n                    margin: \"8px\"\r\n                }}>\r\n                <tbody>\r\n                    {this.renderRows()}\r\n                </tbody>\r\n            </table>\r\n        </GridContiner>\r\n\r\n        </React.Fragment>\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Map from './Map';\r\n\r\nexport default class MapFactory {\r\n    \r\n    build() {\r\n        return <React.Fragment>\r\n            <Map \r\n                rowsPath={\"init/rowsNumber\"}\r\n                columnsPath={\"init/columnsNumber\"}\r\n            />\r\n        </React.Fragment>\r\n\r\n    }\r\n}\r\n","import React from 'react';\r\nimport MapFactory from \"./Components/MapFactory\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      { new MapFactory().build() }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}